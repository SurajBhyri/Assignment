
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Wolf <claire@symbioticeda.com>          |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9+2406 (git sha1 ca763e6d5, gcc 10.2.1-6 -fPIC -Os)


-- Parsing `/data/data/com.termux/files/home/fpga-examples/blink/helloworldfpga.v' using frontend `verilog' --

1. Executing Verilog-2005 frontend: /data/data/com.termux/files/home/fpga-examples/blink/helloworldfpga.v
Parsing Verilog input from `/data/data/com.termux/files/home/fpga-examples/blink/helloworldfpga.v' to AST representation.
Generating RTLIL representation for module `\helloworldfpga'.
Warning: wire '\nD2' is assigned in a block at /data/data/com.termux/files/home/fpga-examples/blink/helloworldfpga.v:23.1-23.27.
Warning: wire '\nD1' is assigned in a block at /data/data/com.termux/files/home/fpga-examples/blink/helloworldfpga.v:24.1-24.30.
Warning: wire '\nD0' is assigned in a block at /data/data/com.termux/files/home/fpga-examples/blink/helloworldfpga.v:25.1-25.28.
Successfully finished Verilog frontend.

-- Running command `tcl /data/data/com.termux/files/home/symbiflow/quicklogic-arch-defs/share/quicklogic/synth.tcl' --
[TCL: yosys -import] Command name collision: found pre-existing command `cd' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `eval' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `exec' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `read' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `trace' -> skip.

2. Executing Verilog-2005 frontend: /data/data/com.termux/files/home/symbiflow/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v
Parsing Verilog input from `/data/data/com.termux/files/home/symbiflow/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\VCC'.
Generating RTLIL representation for module `\GND'.
Generating RTLIL representation for module `\fpga_interconnect'.
Generating RTLIL representation for module `\CLOCK_CELL'.
Generating RTLIL representation for module `\BIDIR_CELL'.
Generating RTLIL representation for module `\SDIOMUX_CELL'.
Generating RTLIL representation for module `\T_FRAG'.
Generating RTLIL representation for module `\B_FRAG'.
Generating RTLIL representation for module `\Q_FRAG'.
Generating RTLIL representation for module `\F_FRAG'.
Generating RTLIL representation for module `\C_FRAG'.
Generating RTLIL representation for module `\ASSP'.
Generating RTLIL representation for module `\MULT'.
Generating RTLIL representation for module `\GMUX_IP'.
Generating RTLIL representation for module `\GMUX_IC'.
Successfully finished Verilog frontend.

3. Executing Verilog-2005 frontend: /data/data/com.termux/files/home/symbiflow/quicklogic-arch-defs/bin/../share/arch/ql-eos-s3_wlcsp/cells/ram_sim.v
Parsing Verilog input from `/data/data/com.termux/files/home/symbiflow/quicklogic-arch-defs/bin/../share/arch/ql-eos-s3_wlcsp/cells/ram_sim.v' to AST representation.
Generating RTLIL representation for module `\RAM_CE0_FE0_PR0_WSA0_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE0_PR0_WSA0_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE0_PR0_WSA1_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE0_PR0_WSA1_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE0_PR1_WSA0_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE0_PR1_WSA0_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE0_PR1_WSA1_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE0_PR1_WSA1_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D0_PR0_WSA0_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D0_PR0_WSA0_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D0_PR0_WSA1_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D0_PR0_WSA1_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D0_PR1_WSA0_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D0_PR1_WSA0_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D0_PR1_WSA1_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D0_PR1_WSA1_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D1_PR0_WSA0_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D1_PR0_WSA0_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D1_PR0_WSA1_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D1_PR0_WSA1_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D1_PR1_WSA0_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D1_PR1_WSA0_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D1_PR1_WSA1_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D1_PR1_WSA1_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR0_WSA0_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR0_WSA0_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR0_WSA0_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR0_WSA1_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR0_WSA1_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR0_WSA1_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR0_WSA2_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR0_WSA2_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR0_WSA2_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR1_WSA0_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR1_WSA0_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR1_WSA0_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR1_WSA1_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR1_WSA1_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR1_WSA1_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR1_WSA2_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR1_WSA2_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR1_WSA2_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR0_WSA0_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR0_WSA0_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR0_WSA0_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR0_WSA1_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR0_WSA1_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR0_WSA1_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR0_WSA2_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR0_WSA2_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR0_WSA2_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR1_WSA0_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR1_WSA0_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR1_WSA0_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR1_WSA1_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR1_WSA1_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR1_WSA1_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR1_WSA2_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR1_WSA2_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR1_WSA2_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR0_WSA0_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR0_WSA0_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR0_WSA0_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR0_WSA1_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR0_WSA1_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR0_WSA1_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR0_WSA2_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR0_WSA2_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR0_WSA2_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR1_WSA0_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR1_WSA0_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR1_WSA0_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR1_WSA1_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR1_WSA1_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR1_WSA1_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR1_WSA2_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR1_WSA2_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR1_WSA2_WSB2_VPR'.
Successfully finished Verilog frontend.

4. Executing SYNTH_QUICKLOGIC pass.

4.1. Executing Verilog-2005 frontend: /data/data/com.termux/files/home/symbiflow/bin/../share/yosys/quicklogic/cells_sim.v
Parsing Verilog input from `/data/data/com.termux/files/home/symbiflow/bin/../share/yosys/quicklogic/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\inv'.
Generating RTLIL representation for module `\buff'.
Generating RTLIL representation for module `\logic_0'.
Generating RTLIL representation for module `\logic_1'.
Generating RTLIL representation for module `\gclkbuff'.
Successfully finished Verilog frontend.

4.2. Executing Verilog-2005 frontend: /data/data/com.termux/files/home/symbiflow/bin/../share/yosys/quicklogic/pp3_cells_sim.v
Parsing Verilog input from `/data/data/com.termux/files/home/symbiflow/bin/../share/yosys/quicklogic/pp3_cells_sim.v' to AST representation.
Generating RTLIL representation for module `\LUT1'.
Generating RTLIL representation for module `\LUT2'.
Generating RTLIL representation for module `\LUT3'.
Generating RTLIL representation for module `\LUT4'.
Generating RTLIL representation for module `\inpad'.
Generating RTLIL representation for module `\outpad'.
Generating RTLIL representation for module `\ckpad'.
Generating RTLIL representation for module `\bipad'.
Generating RTLIL representation for module `\dff'.
Generating RTLIL representation for module `\dffc'.
Generating RTLIL representation for module `\dffp'.
Generating RTLIL representation for module `\dffpc'.
Generating RTLIL representation for module `\dffe'.
Generating RTLIL representation for module `\dffec'.
Generating RTLIL representation for module `\dffepc'.
Generating RTLIL representation for module `\AND2I0'.
Generating RTLIL representation for module `\mux2x0'.
Generating RTLIL representation for module `\mux2x1'.
Generating RTLIL representation for module `\mux4x0'.
Generating RTLIL representation for module `\mux8x0'.
Generating RTLIL representation for module `\logic_cell_macro'.
Generating RTLIL representation for module `\ahb_gen_bfm'.
Generating RTLIL representation for module `\oscillator_s1'.
Generating RTLIL representation for module `\sdma_bfm'.
Generating RTLIL representation for module `\ahb2fb_asynbrig_if'.
Generating RTLIL representation for module `\fb2ahb_asynbrig_if'.
Generating RTLIL representation for module `\ahb2fb_asynbrig'.
Generating RTLIL representation for module `\qlal4s3b_cell_macro_bfm'.
Generating RTLIL representation for module `\qlal4s3b_cell_macro'.
Generating RTLIL representation for module `\fifo_controller_model'.
Generating RTLIL representation for module `\ram'.
Warning: Replacing memory \ram with list of registers. See /data/data/com.termux/files/home/symbiflow/bin/../share/yosys/quicklogic/pp3_cells_sim.v:3671, /data/data/com.termux/files/home/symbiflow/bin/../share/yosys/quicklogic/pp3_cells_sim.v:3585, /data/data/com.termux/files/home/symbiflow/bin/../share/yosys/quicklogic/pp3_cells_sim.v:3560
Generating RTLIL representation for module `\x2_model'.
Generating RTLIL representation for module `\ram_block_8K'.
Generating RTLIL representation for module `\sw_mux'.
Generating RTLIL representation for module `\ram8k_2x1_cell'.
Generating RTLIL representation for module `\ram8k_2x1_cell_macro'.
Generating RTLIL representation for module `\gpio_cell_macro'.
Generating RTLIL representation for module `\qlal4s3_mult_32x32_cell'.
Generating RTLIL representation for module `\qlal4s3_mult_16x16_cell'.
Generating RTLIL representation for module `\signed_mult'.
Generating RTLIL representation for module `\qlal4s3_mult_cell_macro'.
Generating RTLIL representation for module `\RAM_8K_BLK'.
Generating RTLIL representation for module `\RAM_16K_BLK'.
Generating RTLIL representation for module `\FIFO_8K_BLK'.
Generating RTLIL representation for module `\FIFO_16K_BLK'.
Successfully finished Verilog frontend.

4.3. Executing HIERARCHY pass (managing design hierarchy).

4.3.1. Finding top of design hierarchy..
root of   1 design levels: helloworldfpga      
Automatically selected helloworldfpga as design top module.

4.3.2. Analyzing design hierarchy..
Top module:  \helloworldfpga

4.3.3. Analyzing design hierarchy..
Top module:  \helloworldfpga
Removed 0 unused modules.

4.4. Executing PROC pass (convert processes to netlists).

4.4.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

4.4.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$/data/data/com.termux/files/home/symbiflow/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:4781$52 in module MULT.
Marked 2 switch rules as full_case in process $proc$/data/data/com.termux/files/home/symbiflow/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:242$34 in module Q_FRAG.
Marked 1 switch rules as full_case in process $proc$/data/data/com.termux/files/home/fpga-examples/blink/helloworldfpga.v:17$1 in module helloworldfpga.
Removed a total of 0 dead cases.

4.4.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 8 assignments to connections.

4.4.4. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\Q_FRAG.$proc$/data/data/com.termux/files/home/symbiflow/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:0$35'.
  Set init value: \QZ = 1'0

4.4.5. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \QST in `\Q_FRAG.$proc$/data/data/com.termux/files/home/symbiflow/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:242$34'.
Found async reset \QRT in `\Q_FRAG.$proc$/data/data/com.termux/files/home/symbiflow/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:242$34'.

4.4.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\MULT.$proc$/data/data/com.termux/files/home/symbiflow/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:4781$52'.
     1/2: $0\Cmult[63:0] [63:32]
     2/2: $0\Cmult[63:0] [31:0]
Creating decoders for process `\Q_FRAG.$proc$/data/data/com.termux/files/home/symbiflow/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:0$35'.
Creating decoders for process `\Q_FRAG.$proc$/data/data/com.termux/files/home/symbiflow/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:242$34'.
     1/1: $0\QZ[0:0]
Creating decoders for process `\helloworldfpga.$proc$/data/data/com.termux/files/home/fpga-examples/blink/helloworldfpga.v:17$1'.
     1/7: $1\d0[0:0]
     2/7: $1\d1[0:0]
     3/7: $1\d2[0:0]
     4/7: $1\nD0[0:0]
     5/7: $1\nD1[0:0]
     6/7: $1\nD2[0:0]
     7/7: $1\delay[26:0]

4.4.7. Executing PROC_DLATCH pass (convert process syncs to latches).

4.4.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\MULT.\Cmult' using process `\MULT.$proc$/data/data/com.termux/files/home/symbiflow/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:4781$52'.
  created direct connection (no actual register cell created).
Creating register for signal `\Q_FRAG.\QZ' using process `\Q_FRAG.$proc$/data/data/com.termux/files/home/symbiflow/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:242$34'.
Warning: Complex async reset for dff `\QZ'.
  created $dffsr cell `$procdff$924' with positive edge clock and multiple level-sensitive resets.
Creating register for signal `\helloworldfpga.\nD2' using process `\helloworldfpga.$proc$/data/data/com.termux/files/home/fpga-examples/blink/helloworldfpga.v:17$1'.
  created $dff cell `$procdff$925' with positive edge clock.
Creating register for signal `\helloworldfpga.\nD1' using process `\helloworldfpga.$proc$/data/data/com.termux/files/home/fpga-examples/blink/helloworldfpga.v:17$1'.
  created $dff cell `$procdff$926' with positive edge clock.
Creating register for signal `\helloworldfpga.\nD0' using process `\helloworldfpga.$proc$/data/data/com.termux/files/home/fpga-examples/blink/helloworldfpga.v:17$1'.
  created $dff cell `$procdff$927' with positive edge clock.
Creating register for signal `\helloworldfpga.\delay' using process `\helloworldfpga.$proc$/data/data/com.termux/files/home/fpga-examples/blink/helloworldfpga.v:17$1'.
  created $dff cell `$procdff$928' with positive edge clock.
Creating register for signal `\helloworldfpga.\d0' using process `\helloworldfpga.$proc$/data/data/com.termux/files/home/fpga-examples/blink/helloworldfpga.v:17$1'.
  created $dff cell `$procdff$929' with positive edge clock.
Creating register for signal `\helloworldfpga.\d1' using process `\helloworldfpga.$proc$/data/data/com.termux/files/home/fpga-examples/blink/helloworldfpga.v:17$1'.
  created $dff cell `$procdff$930' with positive edge clock.
Creating register for signal `\helloworldfpga.\d2' using process `\helloworldfpga.$proc$/data/data/com.termux/files/home/fpga-examples/blink/helloworldfpga.v:17$1'.
  created $dff cell `$procdff$931' with positive edge clock.

4.4.9. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 4 empty switches in `\MULT.$proc$/data/data/com.termux/files/home/symbiflow/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:4781$52'.
Removing empty process `MULT.$proc$/data/data/com.termux/files/home/symbiflow/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:4781$52'.
Removing empty process `Q_FRAG.$proc$/data/data/com.termux/files/home/symbiflow/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:0$35'.
Found and cleaned up 1 empty switch in `\Q_FRAG.$proc$/data/data/com.termux/files/home/symbiflow/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:242$34'.
Removing empty process `Q_FRAG.$proc$/data/data/com.termux/files/home/symbiflow/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:242$34'.
Found and cleaned up 1 empty switch in `\helloworldfpga.$proc$/data/data/com.termux/files/home/fpga-examples/blink/helloworldfpga.v:17$1'.
Removing empty process `helloworldfpga.$proc$/data/data/com.termux/files/home/fpga-examples/blink/helloworldfpga.v:17$1'.
Cleaned up 6 empty switches.

4.5. Executing FLATTEN pass (flatten design).

4.6. Executing TRIBUF pass.

4.7. Executing OPT_EXPR pass (perform const folding).
Optimizing module helloworldfpga.

4.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \helloworldfpga..
Removed 0 unused cells and 21 unused wires.
<suppressed ~1 debug messages>

4.9. Executing DEMINOUT pass (demote inout ports to input or output).

4.10. Executing OPT pass (performing simple optimizations).

4.10.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module helloworldfpga.

4.10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\helloworldfpga'.
<suppressed ~9 debug messages>
Removed a total of 3 cells.

4.10.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \helloworldfpga..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~7 debug messages>

4.10.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \helloworldfpga.
Performed a total of 0 changes.

4.10.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\helloworldfpga'.
Removed a total of 0 cells.

4.10.6. Executing OPT_RMDFF pass (remove dff with constant values).

4.10.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \helloworldfpga..
Removed 0 unused cells and 3 unused wires.
<suppressed ~1 debug messages>

4.10.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module helloworldfpga.

4.10.9. Rerunning OPT passes. (Maybe there is more to do..)

4.10.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \helloworldfpga..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~7 debug messages>

4.10.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \helloworldfpga.
Performed a total of 0 changes.

4.10.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\helloworldfpga'.
Removed a total of 0 cells.

4.10.13. Executing OPT_RMDFF pass (remove dff with constant values).

4.10.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \helloworldfpga..

4.10.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module helloworldfpga.

4.10.16. Finished OPT passes. (There is nothing left to do.)

4.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module helloworldfpga.

4.12. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \helloworldfpga..

4.13. Executing CHECK pass (checking for obvious problems).
checking module helloworldfpga..
found and reported 0 problems.

4.14. Executing OPT pass (performing simple optimizations).

4.14.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module helloworldfpga.

4.14.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\helloworldfpga'.
Removed a total of 0 cells.

4.14.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \helloworldfpga..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~7 debug messages>

4.14.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \helloworldfpga.
Performed a total of 0 changes.

4.14.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\helloworldfpga'.
Removed a total of 0 cells.

4.14.6. Executing OPT_RMDFF pass (remove dff with constant values).

4.14.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \helloworldfpga..

4.14.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module helloworldfpga.

4.14.9. Finished OPT passes. (There is nothing left to do.)

4.15. Executing WREDUCE pass (reducing word size of cells).
Removed top 31 bits (of 32) from port B of cell helloworldfpga.$add$/data/data/com.termux/files/home/fpga-examples/blink/helloworldfpga.v:18$2 ($add).
Removed top 5 bits (of 32) from port Y of cell helloworldfpga.$add$/data/data/com.termux/files/home/fpga-examples/blink/helloworldfpga.v:18$2 ($add).
Removed top 7 bits (of 32) from port B of cell helloworldfpga.$gt$/data/data/com.termux/files/home/fpga-examples/blink/helloworldfpga.v:20$3 ($gt).
Removed top 5 bits (of 32) from wire helloworldfpga.$add$/data/data/com.termux/files/home/fpga-examples/blink/helloworldfpga.v:18$2_Y.

4.16. Executing PEEPOPT pass (run peephole optimizers).

4.17. Executing PMUXTREE pass.

4.18. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \helloworldfpga..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

4.19. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module helloworldfpga:
  creating $macc model for $add$/data/data/com.termux/files/home/fpga-examples/blink/helloworldfpga.v:18$2 ($add).
  creating $alu model for $macc $add$/data/data/com.termux/files/home/fpga-examples/blink/helloworldfpga.v:18$2.
  creating $alu model for $gt$/data/data/com.termux/files/home/fpga-examples/blink/helloworldfpga.v:20$3 ($gt): new $alu
  creating $alu cell for $gt$/data/data/com.termux/files/home/fpga-examples/blink/helloworldfpga.v:20$3: $auto$alumacc.cc:485:replace_alu$934
  creating $alu cell for $add$/data/data/com.termux/files/home/fpga-examples/blink/helloworldfpga.v:18$2: $auto$alumacc.cc:485:replace_alu$939
  created 2 $alu and 0 $macc cells.

4.20. Executing OPT pass (performing simple optimizations).

4.20.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module helloworldfpga.
<suppressed ~7 debug messages>

4.20.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\helloworldfpga'.
Removed a total of 0 cells.

4.20.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \helloworldfpga..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~7 debug messages>

4.20.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \helloworldfpga.
Performed a total of 0 changes.

4.20.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\helloworldfpga'.
Removed a total of 0 cells.

4.20.6. Executing OPT_RMDFF pass (remove dff with constant values).

4.20.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \helloworldfpga..
Removed 1 unused cells and 2 unused wires.
<suppressed ~2 debug messages>

4.20.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module helloworldfpga.

4.20.9. Rerunning OPT passes. (Maybe there is more to do..)

4.20.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \helloworldfpga..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~7 debug messages>

4.20.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \helloworldfpga.
Performed a total of 0 changes.

4.20.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\helloworldfpga'.
Removed a total of 0 cells.

4.20.13. Executing OPT_RMDFF pass (remove dff with constant values).

4.20.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \helloworldfpga..

4.20.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module helloworldfpga.

4.20.16. Finished OPT passes. (There is nothing left to do.)

4.21. Executing FSM pass (extract and optimize FSM).

4.21.1. Executing FSM_DETECT pass (finding FSMs in design).

4.21.2. Executing FSM_EXTRACT pass (extracting FSM from design).

4.21.3. Executing FSM_OPT pass (simple optimizations of FSMs).

4.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \helloworldfpga..

4.21.5. Executing FSM_OPT pass (simple optimizations of FSMs).

4.21.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

4.21.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

4.21.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

4.22. Executing OPT pass (performing simple optimizations).

4.22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module helloworldfpga.

4.22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\helloworldfpga'.
Removed a total of 0 cells.

4.22.3. Executing OPT_RMDFF pass (remove dff with constant values).

4.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \helloworldfpga..

4.22.5. Finished fast OPT passes.

4.23. Executing MEMORY pass.

4.23.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

4.23.2. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

4.23.3. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \helloworldfpga..

4.23.4. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

4.23.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \helloworldfpga..

4.23.6. Executing MEMORY_COLLECT pass (generating $mem cells).

4.24. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \helloworldfpga..

4.25. Executing MEMORY_BRAM pass (mapping $mem cells to block memories).

4.26. Executing PP3_BRAMINIT pass.
cell type $and$/data/data/com.termux/files/home/fpga-examples/blink/helloworldfpga.v:23$4
cell type $and$/data/data/com.termux/files/home/fpga-examples/blink/helloworldfpga.v:23$6
cell type $and$/data/data/com.termux/files/home/fpga-examples/blink/helloworldfpga.v:24$9
cell type $and$/data/data/com.termux/files/home/fpga-examples/blink/helloworldfpga.v:25$15
cell type $and$/data/data/com.termux/files/home/fpga-examples/blink/helloworldfpga.v:25$16
cell type $auto$alumacc.cc:485:replace_alu$934
cell type $auto$alumacc.cc:485:replace_alu$939
cell type $logic_not$/data/data/com.termux/files/home/fpga-examples/blink/helloworldfpga.v:23$5
cell type $logic_not$/data/data/com.termux/files/home/fpga-examples/blink/helloworldfpga.v:24$8
cell type $logic_not$/data/data/com.termux/files/home/fpga-examples/blink/helloworldfpga.v:25$14
cell type $or$/data/data/com.termux/files/home/fpga-examples/blink/helloworldfpga.v:23$7
cell type $or$/data/data/com.termux/files/home/fpga-examples/blink/helloworldfpga.v:24$12
cell type $or$/data/data/com.termux/files/home/fpga-examples/blink/helloworldfpga.v:25$17
cell type $procdff$925
cell type $procdff$926
cell type $procdff$927
cell type $procdff$928
cell type $procdff$929
cell type $procdff$930
cell type $procdff$931
cell type $procmux$892
cell type $procmux$895
cell type $procmux$898
cell type $procmux$901
cell type $procmux$904
cell type $procmux$907
cell type $procmux$910
cell type u_qlal4s3b_cell_macro

4.27. Executing TECHMAP pass (map to technology primitives).

4.27.1. Executing Verilog-2005 frontend: /data/data/com.termux/files/home/symbiflow/bin/../share/yosys/quicklogic/pp3_brams_map.v
Parsing Verilog input from `/data/data/com.termux/files/home/symbiflow/bin/../share/yosys/quicklogic/pp3_brams_map.v' to AST representation.
Generating RTLIL representation for module `\$__QUICKLOGIC_RAMB16K'.
/data/data/com.termux/files/home/symbiflow/bin/../share/yosys/quicklogic/pp3_brams_map.v:21: Warning: Identifier `\VCC' is implicitly declared.
/data/data/com.termux/files/home/symbiflow/bin/../share/yosys/quicklogic/pp3_brams_map.v:22: Warning: Identifier `\GND' is implicitly declared.
Generating RTLIL representation for module `\$__QUICKLOGIC_RAMB8K'.
/data/data/com.termux/files/home/symbiflow/bin/../share/yosys/quicklogic/pp3_brams_map.v:235: Warning: Identifier `\GND' is implicitly declared.
/data/data/com.termux/files/home/symbiflow/bin/../share/yosys/quicklogic/pp3_brams_map.v:236: Warning: Identifier `\VCC' is implicitly declared.
Generating RTLIL representation for module `\RAM_8K_BLK'.
/data/data/com.termux/files/home/symbiflow/bin/../share/yosys/quicklogic/pp3_brams_map.v:538: Warning: Range [17:0] select out of bounds on signal `\out_reg0': Setting 2 MSB bits to undef.
Generating RTLIL representation for module `\RAM_16K_BLK'.
/data/data/com.termux/files/home/symbiflow/bin/../share/yosys/quicklogic/pp3_brams_map.v:824: Warning: Range [35:0] select out of bounds on signal `\out_reg0': Setting 4 MSB bits to undef.
Generating RTLIL representation for module `\FIFO_8K_BLK'.
/data/data/com.termux/files/home/symbiflow/bin/../share/yosys/quicklogic/pp3_brams_map.v:998: Warning: Range [35:0] select out of bounds on signal `\out_reg0': Setting 20 MSB bits to undef.
Generating RTLIL representation for module `\FIFO_16K_BLK'.
/data/data/com.termux/files/home/symbiflow/bin/../share/yosys/quicklogic/pp3_brams_map.v:1249: Warning: Range [35:0] select out of bounds on signal `\out_reg0': Setting 4 MSB bits to undef.
Successfully finished Verilog frontend.

4.27.2. Continuing TECHMAP pass.
No more expansions possible.

4.28. Executing OPT pass (performing simple optimizations).

4.28.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module helloworldfpga.

4.28.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\helloworldfpga'.
Removed a total of 0 cells.

4.28.3. Executing OPT_RMDFF pass (remove dff with constant values).

4.28.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \helloworldfpga..

4.28.5. Finished fast OPT passes.

4.29. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

4.30. Executing OPT pass (performing simple optimizations).

4.30.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module helloworldfpga.

4.30.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\helloworldfpga'.
Removed a total of 0 cells.

4.30.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \helloworldfpga..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~7 debug messages>

4.30.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \helloworldfpga.
Performed a total of 0 changes.

4.30.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\helloworldfpga'.
Removed a total of 0 cells.

4.30.6. Executing OPT_RMDFF pass (remove dff with constant values).

4.30.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \helloworldfpga..

4.30.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module helloworldfpga.

4.30.9. Finished OPT passes. (There is nothing left to do.)

4.31. Executing TECHMAP pass (map to technology primitives).

4.31.1. Executing Verilog-2005 frontend: /data/data/com.termux/files/home/symbiflow/bin/../share/yosys/techmap.v
Parsing Verilog input from `/data/data/com.termux/files/home/symbiflow/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

4.31.2. Continuing TECHMAP pass.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=27\Y_WIDTH=27 for cells of type $alu.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $or.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=25\B_WIDTH=27\Y_WIDTH=27 for cells of type $alu.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $dff.
Using extmapper simplemap for cells of type $xor.
Using template $paramod\_90_lcu\WIDTH=27 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using extmapper simplemap for cells of type $not.
No more expansions possible.
<suppressed ~421 debug messages>

4.32. Executing OPT pass (performing simple optimizations).

4.32.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module helloworldfpga.
<suppressed ~277 debug messages>

4.32.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\helloworldfpga'.
<suppressed ~6 debug messages>
Removed a total of 2 cells.

4.32.3. Executing OPT_RMDFF pass (remove dff with constant values).

4.32.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \helloworldfpga..
Removed 83 unused cells and 173 unused wires.
<suppressed ~84 debug messages>

4.32.5. Finished fast OPT passes.

4.33. Executing MUXCOVER pass (mapping to wider MUXes).
Covering MUX trees in module helloworldfpga..
  Treeifying 33 MUXes:
    Found tree with 1 MUXes at root $0\nD2[0:0].
    Found tree with 1 MUXes at root $0\nD1[0:0].
    Found tree with 1 MUXes at root $0\nD0[0:0].
    Found tree with 1 MUXes at root $0\delay[26:0] [0].
    Found tree with 1 MUXes at root $0\delay[26:0] [1].
    Found tree with 1 MUXes at root $0\delay[26:0] [2].
    Found tree with 1 MUXes at root $0\delay[26:0] [3].
    Found tree with 1 MUXes at root $0\delay[26:0] [4].
    Found tree with 1 MUXes at root $0\delay[26:0] [5].
    Found tree with 1 MUXes at root $0\delay[26:0] [6].
    Found tree with 1 MUXes at root $0\delay[26:0] [7].
    Found tree with 1 MUXes at root $0\delay[26:0] [8].
    Found tree with 1 MUXes at root $0\delay[26:0] [9].
    Found tree with 1 MUXes at root $0\delay[26:0] [10].
    Found tree with 1 MUXes at root $0\delay[26:0] [11].
    Found tree with 1 MUXes at root $0\delay[26:0] [12].
    Found tree with 1 MUXes at root $0\delay[26:0] [13].
    Found tree with 1 MUXes at root $0\delay[26:0] [14].
    Found tree with 1 MUXes at root $0\delay[26:0] [15].
    Found tree with 1 MUXes at root $0\delay[26:0] [16].
    Found tree with 1 MUXes at root $0\delay[26:0] [17].
    Found tree with 1 MUXes at root $0\delay[26:0] [18].
    Found tree with 1 MUXes at root $0\delay[26:0] [19].
    Found tree with 1 MUXes at root $0\delay[26:0] [20].
    Found tree with 1 MUXes at root $0\delay[26:0] [21].
    Found tree with 1 MUXes at root $0\delay[26:0] [22].
    Found tree with 1 MUXes at root $0\delay[26:0] [23].
    Found tree with 1 MUXes at root $0\delay[26:0] [24].
    Found tree with 1 MUXes at root $0\delay[26:0] [25].
    Found tree with 1 MUXes at root $0\delay[26:0] [26].
    Found tree with 1 MUXes at root $0\d0[0:0].
    Found tree with 1 MUXes at root $0\d1[0:0].
    Found tree with 1 MUXes at root $0\d2[0:0].
    Finished treeification: Found 33 trees.
  Covering trees:
    Replaced tree at $0\nD2[0:0]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\nD1[0:0]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\nD0[0:0]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [0]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [1]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [2]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [3]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [4]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [5]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [6]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [7]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [8]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [9]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [10]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [11]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [12]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [13]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [14]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [15]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [16]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [17]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [18]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [19]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [20]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [21]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [22]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [23]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [24]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [25]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [26]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\d0[0:0]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\d1[0:0]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\d2[0:0]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
  Added a total of 0 decoder MUXes.
<suppressed ~826 debug messages>

4.34. Executing OPT_EXPR pass (perform const folding).
Optimizing module helloworldfpga.

4.35. Executing OPT pass (performing simple optimizations).

4.35.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module helloworldfpga.

4.35.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\helloworldfpga'.
Removed a total of 0 cells.

4.35.3. Executing OPT_RMDFF pass (remove dff with constant values).

4.35.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \helloworldfpga..

4.35.5. Finished fast OPT passes.

4.36. Executing OPT_EXPR pass (perform const folding).
Optimizing module helloworldfpga.

4.37. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\helloworldfpga'.
Removed a total of 0 cells.

4.38. Executing OPT_RMDFF pass (remove dff with constant values).

4.39. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \helloworldfpga..

4.40. Executing OPT pass (performing simple optimizations).

4.40.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module helloworldfpga.

4.40.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\helloworldfpga'.
Removed a total of 0 cells.

4.40.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \helloworldfpga..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

4.40.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \helloworldfpga.
Performed a total of 0 changes.

4.40.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\helloworldfpga'.
Removed a total of 0 cells.

4.40.6. Executing OPT_RMDFF pass (remove dff with constant values).

4.40.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \helloworldfpga..

4.40.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module helloworldfpga.

4.40.9. Finished OPT passes. (There is nothing left to do.)

4.41. Executing OPT_EXPR pass (perform const folding).
Optimizing module helloworldfpga.

4.42. Executing DFF2DFFE pass (transform $dff to $dffe where applicable).
Transforming FF to FF+Enable cells in module helloworldfpga:
  created $_DFFE_PP_ cell $auto$dff2dffe.cc:219:handle_dff_cell$1855 for $0\nD2[0:0] -> \nD2.
  removing now obsolete cell $auto$simplemap.cc:420:simplemap_dff$1082.
  created $_DFFE_PP_ cell $auto$dff2dffe.cc:219:handle_dff_cell$1862 for $0\nD1[0:0] -> \nD1.
  removing now obsolete cell $auto$simplemap.cc:420:simplemap_dff$1083.
  created $_DFFE_PP_ cell $auto$dff2dffe.cc:219:handle_dff_cell$1869 for $0\nD0[0:0] -> \nD0.
  removing now obsolete cell $auto$simplemap.cc:420:simplemap_dff$1084.
  created $_DFFE_PP_ cell $auto$dff2dffe.cc:219:handle_dff_cell$1876 for $0\d0[0:0] -> \d0.
  removing now obsolete cell $auto$simplemap.cc:420:simplemap_dff$1112.
  created $_DFFE_PP_ cell $auto$dff2dffe.cc:219:handle_dff_cell$1883 for $0\d1[0:0] -> \d1.
  removing now obsolete cell $auto$simplemap.cc:420:simplemap_dff$1113.
  created $_DFFE_PP_ cell $auto$dff2dffe.cc:219:handle_dff_cell$1890 for $0\d2[0:0] -> \d2.
  removing now obsolete cell $auto$simplemap.cc:420:simplemap_dff$1114.

4.43. Executing TECHMAP pass (map to technology primitives).

4.43.1. Executing Verilog-2005 frontend: /data/data/com.termux/files/home/symbiflow/bin/../share/yosys/quicklogic/pp3_ffs_map.v
Parsing Verilog input from `/data/data/com.termux/files/home/symbiflow/bin/../share/yosys/quicklogic/pp3_ffs_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_DFFSR_NPP_'.
Generating RTLIL representation for module `\$_DFFSR_PPP_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Successfully finished Verilog frontend.

4.43.2. Continuing TECHMAP pass.
Using template \$_DFFE_PP_ for cells of type $_DFFE_PP_.
Using template \$_DFF_P_ for cells of type $_DFF_P_.
No more expansions possible.
<suppressed ~33 debug messages>

4.44. Executing OPT_EXPR pass (perform const folding).
Optimizing module helloworldfpga.
<suppressed ~12 debug messages>

4.45. Executing SIMPLEMAP pass (map simple cells to gate primitives).

4.46. Executing OPT_EXPR pass (perform const folding).
Optimizing module helloworldfpga.

4.47. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\helloworldfpga'.
<suppressed ~15 debug messages>
Removed a total of 5 cells.

4.48. Executing OPT_RMDFF pass (remove dff with constant values).

4.49. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \helloworldfpga..
Removed 0 unused cells and 128 unused wires.
<suppressed ~1 debug messages>

4.50. Executing OPT pass (performing simple optimizations).

4.50.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module helloworldfpga.

4.50.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\helloworldfpga'.
Removed a total of 0 cells.

4.50.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \helloworldfpga..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

4.50.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \helloworldfpga.
Performed a total of 0 changes.

4.50.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\helloworldfpga'.
Removed a total of 0 cells.

4.50.6. Executing OPT_RMDFF pass (remove dff with constant values).

4.50.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \helloworldfpga..

4.50.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module helloworldfpga.

4.50.9. Finished OPT passes. (There is nothing left to do.)

4.51. Executing TECHMAP pass (map to technology primitives).

4.51.1. Executing Verilog-2005 frontend: /data/data/com.termux/files/home/symbiflow/bin/../share/yosys/quicklogic/pp3_latches_map.v
Parsing Verilog input from `/data/data/com.termux/files/home/symbiflow/bin/../share/yosys/quicklogic/pp3_latches_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Generating RTLIL representation for module `\$_DLATCHSR_NNN_'.
Generating RTLIL representation for module `\$_DLATCHSR_NNP_'.
Generating RTLIL representation for module `\$_DLATCHSR_NPN_'.
Generating RTLIL representation for module `\$_DLATCHSR_NPP_'.
Generating RTLIL representation for module `\$_DLATCHSR_PNN_'.
Generating RTLIL representation for module `\$_DLATCHSR_PNP_'.
Generating RTLIL representation for module `\$_DLATCHSR_PPN_'.
Generating RTLIL representation for module `\$_DLATCHSR_PPP_'.
Successfully finished Verilog frontend.

4.51.2. Continuing TECHMAP pass.
No more expansions possible.

4.52. Executing ABC pass (technology mapping using ABC).

4.52.1. Extracting gate netlist of module `\helloworldfpga' to `<abc-temp-dir>/input.blif'..
Extracted 181 gates and 212 wires to a netlist network with 30 inputs and 31 outputs.

4.52.1.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + write_blif <abc-temp-dir>/output.blif 

4.52.1.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:       77
ABC RESULTS:        internal signals:      151
ABC RESULTS:           input signals:       30
ABC RESULTS:          output signals:       31
Removing temp directory.

4.53. Executing TECHMAP pass (map to technology primitives).

4.53.1. Executing Verilog-2005 frontend: /data/data/com.termux/files/home/symbiflow/bin/../share/yosys/quicklogic/pp3_ffs_map.v
Parsing Verilog input from `/data/data/com.termux/files/home/symbiflow/bin/../share/yosys/quicklogic/pp3_ffs_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_DFFSR_NPP_'.
Generating RTLIL representation for module `\$_DFFSR_PPP_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Successfully finished Verilog frontend.

4.53.2. Continuing TECHMAP pass.
No more expansions possible.
Removed 0 unused cells and 130 unused wires.

4.54. Executing TECHMAP pass (map to technology primitives).

4.54.1. Executing Verilog-2005 frontend: /data/data/com.termux/files/home/symbiflow/bin/../share/yosys/quicklogic/pp3_cells_map.v
Parsing Verilog input from `/data/data/com.termux/files/home/symbiflow/bin/../share/yosys/quicklogic/pp3_cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_MUX8_'.
Generating RTLIL representation for module `\$_MUX4_'.
Generating RTLIL representation for module `\$_MUX_'.
Generating RTLIL representation for module `\$_NOT_'.
Generating RTLIL representation for module `\qlal4s3_mult_16x16_cell'.
/data/data/com.termux/files/home/symbiflow/bin/../share/yosys/quicklogic/pp3_cells_map.v:44: Warning: Identifier `\Valid_mult_w' is implicitly declared.
Successfully finished Verilog frontend.

4.54.2. Executing Verilog-2005 frontend: /data/data/com.termux/files/home/symbiflow/bin/../share/yosys/quicklogic/pp3_lut_map.v
Parsing Verilog input from `/data/data/com.termux/files/home/symbiflow/bin/../share/yosys/quicklogic/pp3_lut_map.v' to AST representation.
Generating RTLIL representation for module `\$lut'.
Successfully finished Verilog frontend.

4.54.3. Continuing TECHMAP pass.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01111000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11000110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10000011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000011111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000001101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000101100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11001010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00111010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1001 for cells of type $lut.
No more expansions possible.
<suppressed ~324 debug messages>
Removed 0 unused cells and 154 unused wires.

4.55. Executing Quicklogic_EQN pass (calculate equations for luts).

4.56. Updated 77 of LUT* elements with equation.

4.57. Executing AUTONAME pass.
Renamed 522 objects in module helloworldfpga (13 iterations).
<suppressed ~163 debug messages>

4.58. Executing HIERARCHY pass (managing design hierarchy).

4.58.1. Analyzing design hierarchy..
Top module:  \helloworldfpga

4.58.2. Analyzing design hierarchy..
Top module:  \helloworldfpga
Removed 0 unused modules.

4.59. Printing statistics.

=== helloworldfpga ===

   Number of wires:                 62
   Number of wire bits:            114
   Number of public wires:          62
   Number of public wire bits:     114
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                111
     LUT2                           21
     LUT3                           24
     LUT4                           32
     dff                            27
     dffe                            6
     qlal4s3b_cell_macro             1

4.60. Executing CHECK pass (checking for obvious problems).
checking module helloworldfpga..
found and reported 0 problems.

4.61. Executing CLKBUFMAP pass (inserting global clock buffers).
Inserting $_BUF_ on helloworldfpga.clk[0].

4.62. Executing IOPADMAP pass (mapping inputs/outputs to IO-PAD cells).
Mapping port helloworldfpga.c using outpad.
Mapping port helloworldfpga.nD0 using outpad.
Mapping port helloworldfpga.nD1 using outpad.
Mapping port helloworldfpga.nD2 using outpad.

4.63. Executing SPLITNETS pass (splitting up multi-bit signals).

4.64. Executing SETUNDEF pass (replace undef values with defined constants).

4.65. Executing HILOMAP pass (mapping to constant drivers).

4.66. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \helloworldfpga..
Removed 0 unused cells and 4 unused wires.
<suppressed ~3 debug messages>

4.67. Executing CHECK pass (checking for obvious problems).
checking module helloworldfpga..
found and reported 0 problems.

5. Printing statistics.

=== helloworldfpga ===

   Number of wires:                116
   Number of wire bits:            116
   Number of public wires:         113
   Number of public wire bits:     113
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                116
     LUT2                           21
     LUT3                           24
     LUT4                           32
     dff                            27
     dffe                            6
     logic_0                         1
     outpad                          4
     qlal4s3b_cell_macro             1

Loading PCF from '/data/data/com.termux/files/home/fpga-examples/blink/quickfeather.pcf'...
Loading pinmap CSV from '/data/data/com.termux/files/home/symbiflow/quicklogic-arch-defs/share/arch/ql-eos-s3_wlcsp/pinmap_PU64.csv'...
Processing cells...
  type       | net        | pad        | loc      | type     | instance
 ------------+------------+------------+----------+----------+-----------
  outpad     | c          | 64         | X14Y3    | BIDIR    | $iopadmap$helloworldfpga.c
  outpad     | nD0        | 3          | X12Y3    | BIDIR    | $iopadmap$helloworldfpga.nD0
  outpad     | nD1        | 2          | X10Y3    | BIDIR    | $iopadmap$helloworldfpga.nD1
  outpad     | nD2        | 6          | X8Y3     | BIDIR    | $iopadmap$helloworldfpga.nD2

6. Executing Verilog backend.
Dumping module `\helloworldfpga'.

7. Executing TECHMAP pass (map to technology primitives).

7.1. Executing Verilog-2005 frontend: /data/data/com.termux/files/home/symbiflow/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_map.v
Parsing Verilog input from `/data/data/com.termux/files/home/symbiflow/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_map.v' to AST representation.
Generating RTLIL representation for module `\logic_0'.
Generating RTLIL representation for module `\logic_1'.
Generating RTLIL representation for module `\inpad'.
Generating RTLIL representation for module `\outpad'.
Generating RTLIL representation for module `\bipad'.
Generating RTLIL representation for module `\ckpad'.
Generating RTLIL representation for module `\qhsckibuff'.
Generating RTLIL representation for module `\qhsckbuff'.
Generating RTLIL representation for module `\gclkbuff'.
Generating RTLIL representation for module `\logic_cell_macro'.
Generating RTLIL representation for module `\inv'.
Generating RTLIL representation for module `\mux2x0'.
Generating RTLIL representation for module `\mux4x0'.
Generating RTLIL representation for module `\mux8x0'.
Generating RTLIL representation for module `\LUT1'.
Generating RTLIL representation for module `\LUT2'.
Generating RTLIL representation for module `\LUT3'.
Generating RTLIL representation for module `\LUT4'.
Generating RTLIL representation for module `\dff'.
Generating RTLIL representation for module `\dffc'.
Generating RTLIL representation for module `\dffp'.
Generating RTLIL representation for module `\dffpc'.
Generating RTLIL representation for module `\dffe'.
Generating RTLIL representation for module `\dffec'.
Generating RTLIL representation for module `\dffepc'.
Generating RTLIL representation for module `\dffsc'.
Generating RTLIL representation for module `\qlal4s3b_cell_macro'.
Generating RTLIL representation for module `\qlal4s3_mult_32x32_cell'.
Generating RTLIL representation for module `\qlal4s3_mult_16x16_cell'.
Generating RTLIL representation for module `\qlal4s3_mult_cell_macro'.
Successfully finished Verilog frontend.

7.2. Continuing TECHMAP pass.
Using template logic_0 for cells of type logic_0.
No more expansions possible.
<suppressed ~1 debug messages>

8. Executing TECHMAP pass (map to technology primitives).

8.1. Executing Verilog-2005 frontend: /data/data/com.termux/files/home/symbiflow/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_map.v
Parsing Verilog input from `/data/data/com.termux/files/home/symbiflow/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_map.v' to AST representation.
Generating RTLIL representation for module `\logic_0'.
Generating RTLIL representation for module `\logic_1'.
Generating RTLIL representation for module `\inpad'.
Generating RTLIL representation for module `\outpad'.
Generating RTLIL representation for module `\bipad'.
Generating RTLIL representation for module `\ckpad'.
Generating RTLIL representation for module `\qhsckibuff'.
Generating RTLIL representation for module `\qhsckbuff'.
Generating RTLIL representation for module `\gclkbuff'.
Generating RTLIL representation for module `\logic_cell_macro'.
Generating RTLIL representation for module `\inv'.
Generating RTLIL representation for module `\mux2x0'.
Generating RTLIL representation for module `\mux4x0'.
Generating RTLIL representation for module `\mux8x0'.
Generating RTLIL representation for module `\LUT1'.
Generating RTLIL representation for module `\LUT2'.
Generating RTLIL representation for module `\LUT3'.
Generating RTLIL representation for module `\LUT4'.
Generating RTLIL representation for module `\dff'.
Generating RTLIL representation for module `\dffc'.
Generating RTLIL representation for module `\dffp'.
Generating RTLIL representation for module `\dffpc'.
Generating RTLIL representation for module `\dffe'.
Generating RTLIL representation for module `\dffec'.
Generating RTLIL representation for module `\dffepc'.
Generating RTLIL representation for module `\dffsc'.
Generating RTLIL representation for module `\qlal4s3b_cell_macro'.
Generating RTLIL representation for module `\qlal4s3_mult_32x32_cell'.
Generating RTLIL representation for module `\qlal4s3_mult_16x16_cell'.
Generating RTLIL representation for module `\qlal4s3_mult_cell_macro'.
Successfully finished Verilog frontend.

8.2. Continuing TECHMAP pass.
Using template qlal4s3b_cell_macro for cells of type qlal4s3b_cell_macro.
Using template dff for cells of type dff.
Using template $paramod$b8e400b0c524196854471b6867fb4998e798de7d\LUT3 for cells of type LUT3.
Using template $paramod$bf21fee4b6975de7353dd955d4b3a8eef751c7c5\LUT2 for cells of type LUT2.
Using template $paramod$5c78c2936b979d140e9c5335a1758330d6e05c7b\LUT4 for cells of type LUT4.
Using template $paramod$e7e37961662412d7dd1961919c60cc96c5b16f01\LUT2 for cells of type LUT2.
Using template $paramod$8ec3083c78151c28b65d6aa206d62ef0216666fd\LUT3 for cells of type LUT3.
Using template $paramod$5198abf5ef98e6a0b63e0942c582d5fb5feaeb0d\LUT3 for cells of type LUT3.
Using template $paramod$0dee8c45763e54f30353b4988d9129c450b64183\LUT3 for cells of type LUT3.
Using template $paramod$08b61d33fc5053edb3ff48cc7932a6bed21127f8\LUT3 for cells of type LUT3.
Using template $paramod$885d448b152f0d0eb07370269f766062b2b71bdb\LUT4 for cells of type LUT4.
Using template $paramod$ff2e5cbde8581985efc7fcce5ccd6d147decc8f8\LUT3 for cells of type LUT3.
Using template $paramod$0d57a20297f7d814347a60e796eb37c1dbe1a686\LUT3 for cells of type LUT3.
Using template $paramod$86fc6f3441a6779c63af6935d48b3ebd1c0460a9\LUT3 for cells of type LUT3.
Using template $paramod$1f22ed6c7002e8d2949c35b69b42d33f3d67af46\LUT4 for cells of type LUT4.
Using template $paramod$2c16e524d34079620431678c7f0a8026eb93e228\LUT4 for cells of type LUT4.
Using template $paramod$0bac8de66bcfb448c202f31a4c603d45054ce4da\LUT4 for cells of type LUT4.
Using template $paramod$7e4bd054dbbe83c893326033e721a854d7384b31\LUT3 for cells of type LUT3.
Using template dffe for cells of type dffe.
Using template $paramod$e26d5f83608228413558872bf585b830a9f56b6a\LUT2 for cells of type LUT2.
Using template $paramod$9e35db09801d44e7d3829ca6d3166367119eac5f\LUT3 for cells of type LUT3.
Using template $paramod$73295daa79cd8f21300ad173a8fb0822f56672dc\LUT3 for cells of type LUT3.
Using template $paramod$ed30829c13b3acb9519b3f008c9df903da206e61\outpad for cells of type outpad.
Using template $paramod$03fa78d84bd5e07f6e124fa217a4ce84543d615a\outpad for cells of type outpad.
Using template $paramod$3494bf91dff70d828c5f5312272dede938de1112\outpad for cells of type outpad.
Using template $paramod$479164122f6233c90fb1301d4db36001bb032146\outpad for cells of type outpad.
No more expansions possible.
<suppressed ~422 debug messages>

9. Executing TECHMAP pass (map to technology primitives).

9.1. Executing Verilog-2005 frontend: /data/data/com.termux/files/home/symbiflow/quicklogic-arch-defs/bin/../share/arch/ql-eos-s3_wlcsp/cells/ram_map.v
Parsing Verilog input from `/data/data/com.termux/files/home/symbiflow/quicklogic-arch-defs/bin/../share/arch/ql-eos-s3_wlcsp/cells/ram_map.v' to AST representation.
Generating RTLIL representation for module `\ram8k_2x1_cell_macro'.
Successfully finished Verilog frontend.

9.2. Continuing TECHMAP pass.
No more expansions possible.

10. Executing OPT_EXPR pass (perform const folding).
Optimizing module helloworldfpga.
<suppressed ~372 debug messages>

11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \helloworldfpga..
Removed 0 unused cells and 157 unused wires.
<suppressed ~1 debug messages>

12. Executing SETUNDEF pass (replace undef values with defined constants).

13. Printing statistics.

=== helloworldfpga ===

   Number of wires:               1144
   Number of wire bits:           1261
   Number of public wires:        1118
   Number of public wire bits:    1118
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                115
     ASSP                            1
     BIDIR_CELL                      4
     C_FRAG                         32
     Q_FRAG                         33
     T_FRAG                         45

14. Executing JSON backend.

15. Executing Verilog backend.
Dumping module `\helloworldfpga'.

Warnings: 11 unique messages, 14 total
End of script. Logfile hash: 4cbf8e62da, CPU: user 5.79s system 0.42s, MEM: 261.33 MB peak
Yosys 0.9+2406 (git sha1 ca763e6d5, gcc 10.2.1-6 -fPIC -Os)
Time spent: 60% 18x read_verilog (3 sec), 7% 24x opt_clean (0 sec), ...
